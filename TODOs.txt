           ----- LIST OF THINGS TO DO -----

Disclaimer:
  This file is in a constant state of flux.
  Anything in here can change at any time, and nothing here is a promise for the future.


WORK IN PROGRESS (LONG RUNNING - on different branches in git)

 * Compatibility UI (branch "compatibility-ui")


IMPORTANT

 * save track lengths to database
 * save track artist/title/album to database
 * regular automatic cleanup of old log files while the server is running


KNOWN PROBLEMS

 * for some tracks we get the wrong length (caused by length estimation in TagLib)
 * when on GStreamer: InvalidMedia error "Your GStreamer installation is missing a plug-in" freezes playback
 * GUI remote: tracks can be dragged using the right mouse button (not just the left button)
 * GUI remote: tracks without title/artist info are listed as a blank line in the music collection table
 * hash calculation does not skip padding bytes
 * preloaded tracks are sometimes deleted before they are used because they are old
 * player fails to play preloaded entries of which the file has been deleted already
 * GUI remote: searching the music collection for "e" does not return results having "ë"
 * a "skip" operation should not affect the current track's score if performed by another user
 * server should pause playback and notify the client when its host goes to sleep (e.g. because battery is very low)
 * GUI remote: multimedia keys don't work when a popup dialog is open (like track info)
 * track title/artist/length update in the music collection does not trigger an update of queue entries referencing that track
 * doing a "skip" often creates a burst of noise; need to wait until the old track has stopped before starting the next one
 * GUI remote: if connection breaks during playback, "position" keeps increasing
 * server does not always take an updated title/artist/album into account when a track is changed on disk
 * scrobbling: "now playing" is triggered by the backoff mechanism after the track is already finished
 * scrobbling: race condition after track finished playing, between history insert and check for something to scrobble


PERFORMANCE ISSUES

 * GUI remote: searching/filtering in the music collection can be slow


IDEAS

 * UI: move server selection, user account creation and authentication to pop-up dialogs
 * server selection: display servers recently used after verifying that they are still available
 * login: don't display user accounts that haven't been used in a long time
 ** player: option for single track mode (vs. continuous play)
 * player: 'load track' action that loads a track but does not start playing; this allows seek before playing
 ** player: 'play again next' action for the song that is currently playing
 *** player: auto-stop timer to make playback stop at or near a specified clock time
 * player: avoid accidental multiple clicks on "skip" affecting track score unnecessarily
 * player: 'seek to start of track' action or button
 * player: make track position display less precise while playing, it is too fast for the human eye anyway
 * queue: ability to put playback volume adjustments in the queue (the same way as breakpoints)
 * queue: ability to put pauses of a specified length in the queue
 * queue: ability to insert a track at a random position in the queue
 * queue: show error marker for a track that has no known file
 * queue: show marker for tracks that occur more than once in the queue
 * queue: join title and artist columns when displaying filename
 * queue: save the contents of the queue on server shutdown and restore it at the next server startup
 * play history: add other statistics relevant for scoring, e.g.: was the track manually added to the queue?
 * play history: add context: was there no user interaction for a long time?
 * music collection: add a clear button for each filter combobox
 * music collection: add 'quick scan' for finding and analyzing new/changed files
 * music collection: provide general statistics (e.g. total number of files present, number of hashes with a file...)
 * music collection: add quick search function, for searching while leaving the current filters unchanged
 *** dynamic mode: detect and prevent track repetition with different hash values
 *** dynamic mode: artist repetition avoidance
 * dynamic mode: ability to force a track to be played regularly (e.g. at least daily)
 ** dynamic mode: try to enqueue "new" tracks and tracks without score regularly
 * power management: close connections when the server machine enters sleep mode
 * power management: don't let the server machine go to sleep while music is playing
 *** thumbs up/down buttons for the song that is playing and for the history, to affect the score a little bit
 * 'love' & 'hate' button for the song that is playing
 * statistics view for the user; with things like "amount of tracks played in the last 7/30/... days"
 * 'about the remote' window; with client version and protocol version
 * 'about the server' window; with server name, UUID and protocol version
 * provide play/pause buttons in Windows taskbar popup
 ** support tagging tracks for classification (like GMail uses labels for e-mail) and meta-info
 * display PMP server version in the client 'About' dialog
 * ability to view server uptime
 * ability to ban a track permanently or temporarily; this will also hide it in the music collection
 * ability to set track property "play this less often" or "play this again soon"
 *** 'play now' option in the context menus of the music collection, the history, and maybe the queue
 * dark theme for the client
 * require the server password when registering a new user account
 * track info dialog: show indication if file is now playing
 * track info dialog: show indication if file is in the queue
 * track info dialog: show indication if file is available or not
 * track info dialog: show indication if a file was manually added to the queue (and when) or added by dynamic mode
 * track info dialog: display filename(s)
 * track info dialog: should become modeless
 * track info dialog: last heard: display "almost 3 months" ago instead of "2 months ago" when applicable
 **** track info dialog: show personal play history for that track
 * provide list of all artists/albums in the collection
 * guest account for party guests; probably without personal mode
 * giant "now playing" screen banner
 * visualize sound wave
 * compatibility UI: let older clients know what's going on (status message) and offer them some limited control (actions)
 * client: ability to reconnect to the server after the connection was broken
 * add button to copy title and artist of current track to clipboard
 * server database backup and restore
 * detect track BPM automatically
 * command-line remote: add a command for seeking (going to a specific time in the current track)
 * command-line remote: add a command for printing recent player history
 * command-line remote: extend the "nowplaying" command to also print album
 * command-line remote: extend the "trackstats" command to accept queue IDs
 * command-line remote: extend the "qmove" command to accept "front" or "end" as destination
 * hash tool: by default only output the hash of the file, no other information
 * rename "GUI Remote" to "Desktop Remote"
 * detect different rips of the same track/album and treat them as one, with unified scores


USER FRIENDLINESS

 * provide 'forgot password' functionality to enable a user to reset their password
 ** work around the need for a full indexation at server startup
 * when creating a new account, explain the meaning of the password score
 * GUI remote: after login it should show what server it is connected to somehow
 * display the title/artist of the track currently playing in the window title of the remote


POLISHING

 * when skipping the current track after a long-time pause (say, more than 10 min), do not let the skip affect scoring of the paused track
 * an icon for the GUI remote executable
 * be more strict in determining the 'end time' for the history of a track that was played; time when paused should not count
 * GUI remote: history/queue/collection: hide selection when losing focus


TECHNICAL IDEAS

 * when running an indexation, analyze the most recently created/updated files first
 * large file support (?)
 * switch to signed integer types for things like queue indices
 * add logging for all server messages that are deemed corrupt or invalid by the client
 * use libgroove for playback (?)


CODE IMPROVEMENTS

 *
